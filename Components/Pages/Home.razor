@page "/home"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Nav

@rendermode InteractiveServer
<PageTitle>Election Admin</PageTitle>

<div class="home-page">
    <AuthorizeView>
        <Authorized>
            <div class="hero">
                <div class="overlay">
                    <h1>Welcome to Election Admin</h1>
                    <p>Email: @email</p>
                    <button class="btn btn-danger" @onclick="Logout">Logout</button>
                </div>
            </div>
        </Authorized>

        <NotAuthorized>
            <p class="text-center mt-3">Redirecting to login...</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string? email;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);

            // ✅ Step 1: Handle token if coming from Google
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                var jwtToken = token.ToString();

                if (!string.IsNullOrWhiteSpace(jwtToken))
                {
                    // Store token locally
                    await localStorage.SetItemAsync("authToken", jwtToken);

                    // Update authentication state
                    await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(jwtToken);

                    // ✅ Remove token from URL after saving
                    Nav.NavigateTo("/", forceLoad: true);
                    return;
                }
                else
                {
                    Console.WriteLine("JWT token missing or invalid in query.");
                }
            }

            // ✅ Step 2: Get user info (after token storage)
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                email = user.FindFirstValue(ClaimTypes.Email);
                StateHasChanged();
            }
            else
            {
                Nav.NavigateTo("/login", forceLoad: true);
            }
        }
    }

    private async void Logout()
    {
        await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        Nav.NavigateTo("/login", forceLoad: true);
    }
}

<style>
    .home-page {
        height: 100vh;
        width: 100vw;
        overflow: hidden;
        position: relative;
    }

    .hero {
        position: relative;
        height: 100vh;
        width: 100%;
        background: url('/images/vote-bg.jpg') no-repeat center center;
        background-size: cover;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.4);
        padding: 30px 50px;
        border-radius: 10px;
        color: white;
    }
</style>