@page "/presidentcounty"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Electionapp.UI.Services
@using Electionapp.UI.Models
@inject PresidentCountyApiClient PcApi
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 class="mb-3">President County Candidates</h3>

<div class="d-flex flex-wrap gap-2 align-items-end mb-3">
    <div class="flex-grow-1">
        <label class="form-label">Search Candidate</label>
        <input class="form-control" placeholder="Type name..." @bind="search" />
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary" @onclick="Load">⟳ Refresh</button>
        <button class="btn btn-primary" @onclick="ShowCreate">+ Add Candidate</button>
    </div>
</div>

@if (loading)
{
    <div class="alert alert-info">Loading…</div>
}
else if (candidates.Count == 0)
{
    <div class="alert alert-warning">No candidates found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>State</th>
                    <th>County</th>
                    <th>Name</th>
                    <th>Party</th>
                    <th>Total Votes</th>
                    <th>Won</th>
                    <th style="width:150px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in candidates)
                {
                    <tr>
                        <td>@c.State</td>
                        <td>@c.County</td>
                        <td>@c.CandidateName</td>
                        <td>@c.Party</td>
                        <td>@c.TotalVotes</td>
                        <td>@c.Won</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => BeginEdit(c)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(c)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>



    <div class="d-flex justify-content-between mt-3">
        <button class="btn btn-outline-secondary" @onclick="PrevPage" disabled="@( !canPrev )">
            Previous
        </button>

        <span>Page @currentPage</span>

        <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@( !canNext )">
            Next
        </button>
    </div>
}

@if (showForm)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEdit ? "Edit Candidate" : "Add Candidate"))</h5>
                    <button type="button" class="btn-close" @onclick="() => showForm = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label class="form-label">State</label>
                        <input class="form-control" @bind="formModel.State" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">County</label>
                        <input class="form-control" @bind="formModel.County" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Candidate Name</label>
                        <input class="form-control" @bind="formModel.CandidateName" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Party</label>
                        <input class="form-control" @bind="formModel.Party" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Total Votes</label>
                        <input type="number" class="form-control" @bind="formModel.TotalVotes" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Won</label>
                        <select class="form-select" @bind="formModel.Won">
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </div>

                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showForm = false">Cancel</button>
                    <button class="btn btn-primary" @onclick="Save">Save</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private List<PresidentCountyDto> candidates = new();
    private bool loading = false;
    private string search = "";

    private int currentPage = 1;
    private int pageSize = 10; // default per page

    private bool showForm = false;
    private bool isEdit = false;
    private PresidentCountyDto formModel = new();  


    private bool canPrev => currentPage > 1;
    private bool canNext => candidates.Count == pageSize;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        loading = true; StateHasChanged();
        candidates = await PcApi.ListAsync(currentPage, pageSize, search);
        loading = false; StateHasChanged();
    }

    private async Task PrevPage()
    {
        if (canPrev)
        {
            currentPage--;
            await Load();
        }
    }

    private async Task NextPage()
    {
        if (canNext)
        {
            currentPage++;
            await Load();
        }
    }

    private async Task Save()
    {
        if (isEdit)
        {
            var updateDto = new UpdatePresidentCountyDto(
                formModel.State,
                formModel.County,
                formModel.CandidateName,
                formModel.Party,
                formModel.TotalVotes,
                formModel.Won
            );
            await PcApi.UpdateAsync(formModel.Id, updateDto);

            var index = candidates.FindIndex(x => x.Id == formModel.Id);
            if (index >= 0) candidates[index] = formModel;
        }
        else
        {
            var createDto = new CreatePresidentCountyDto(
                formModel.State,
                formModel.County,
                formModel.CandidateName,
                formModel.Party,
                formModel.TotalVotes,
                formModel.Won
            );

            var created = await PcApi.CreateAsync(createDto);
            candidates.Add(created);
        }

        showForm = false;
    }




    void ShowCreate()
    {
        formModel = new PresidentCountyDto
            {
                Id = string.Empty,   // or Guid.NewGuid().ToString() if required
                State = string.Empty,
                County = string.Empty,
                CandidateName = string.Empty,
                Party = string.Empty,
                TotalVotes = "0",
                Won = "false"
            };
        isEdit = false;
        showForm = true;
    }

    void BeginEdit(PresidentCountyDto c)
    {
        formModel = new PresidentCountyDto
            {
                Id = c.Id,
                State = c.State,
                County = c.County,
                CandidateName = c.CandidateName,
                Party = c.Party,
                TotalVotes = c.TotalVotes,
                Won = c.Won
            };
        isEdit = true;
        showForm = true;
    }



    async Task ConfirmDelete(PresidentCountyDto c)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Delete '{c.CandidateName}'?")) return;
        await PcApi.DeleteAsync(c.Id);
        candidates.Remove(c);
    }
}
