@page "/"
@page "/login"
@using Electionapp.UI.Models
@using Electionapp.UI.Services
@inject LoginAPI LoginAPI
@inject NavigationManager Nav
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Election Admin</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100 bg-light">
    <div class="card shadow-lg p-4" style="width: 380px; border-radius: 12px;">
        <div class="text-center mb-4">
            <img src="favicon.png" alt="Logo" width="60" class="mb-3" />
            <h3 class="fw-bold">Welcome Back</h3>
            <p class="text-muted">Sign in to continue</p>
        </div>

        <EditForm Model="@loginModel">
            <div class="mb-3">
                <label for="username" class="form-label fw-semibold">Username or Email</label>
                <InputText id="username" @bind-Value="loginModel.UsernameOrEmail" class="form-control" placeholder="Enter your username or email" />

                @if (apiErrors.ContainsKey("UsernameOrEmail"))
                {
                    foreach (var err in apiErrors["UsernameOrEmail"])
                    {
                        <small class="text-danger">@err</small>
                    }
                }
            </div>

            <div class="mb-3">
                <label for="password" class="form-label fw-semibold">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />

                @if (apiErrors.ContainsKey("Password"))
                {
                    foreach (var err in apiErrors["Password"])
                    {
                        <small class="text-danger">@err</small>
                    }
                }
            </div>

            <button type="button" class="btn btn-primary w-100 mb-3" style="border-radius: 8px;" @onclick="HandleLogin">
                Login
            </button>

            <div class="text-center text-muted mb-3">or</div>

            <button type="button" class="btn btn-outline-danger w-100 mb-3" style="border-radius: 8px;" @onclick="LoginWithGoogle">
                <i class="bi bi-google"></i> Login with Google
            </button>

            <div class="text-center">
                <span class="text-muted">Don’t have an account?</span>
                <a href="/signup" class="fw-semibold"> Signup here</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private Dictionary<string, string[]> apiErrors = new();

    private async Task HandleLogin()
    {
        var (success, token, errors) = await LoginAPI.LoginAsync(loginModel);

        if (success && !string.IsNullOrEmpty(token))
        {
            apiErrors.Clear();

            // Save token to local storage
            await localStorage.SetItemAsync("authToken", token);

            // Update authentication state
            await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(token);

            // Redirect
            Nav.NavigateTo("/home");
        }
        else
        {
            apiErrors = errors;
            Console.WriteLine(errors);
            StateHasChanged();
        }
    }

    private void LoginWithGoogle()
    {
        var googleUrl = "https://signup-api-814747071660.us-central1.run.app/api/auth/google-login";
        Nav.NavigateTo(googleUrl, forceLoad: true);
    }
}
